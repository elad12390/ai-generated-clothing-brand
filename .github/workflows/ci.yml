name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      PYTHONUNBUFFERED: '1'
      PIP_DISABLE_PIP_VERSION_CHECK: '1'
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          set -euo pipefail
          # Upgrade pip deterministically and quietly (non-interactive)
          python -m pip install --upgrade pip --disable-pip-version-check -q
          # Install repository-level requirements and backend requirements for tests (quiet, non-interactive)
          if [ -f requirements.txt ]; then python -m pip install -r requirements.txt --disable-pip-version-check --no-cache-dir -q; fi
          if [ -f src/backend/requirements.txt ]; then python -m pip install -r src/backend/requirements.txt --disable-pip-version-check --no-cache-dir -q; fi
          # Ensure FastAPI is present (explicit, small install) as a short-term safeguard
          python -m pip install fastapi --disable-pip-version-check -q || true
          python -m pip install pytest --disable-pip-version-check -q

      - name: Install / environment diagnostics (non-failing)
        run: |
          set -euo pipefail
          echo "--- python info ---"
          python -V || true
          which python || true
          echo "--- repository files ---"
          echo "requirements.txt (top-level):" || true
          if [ -f requirements.txt ]; then sed -n '1,200p' requirements.txt; else echo 'missing'; fi
          echo "src/backend/requirements.txt:" || true
          if [ -f src/backend/requirements.txt ]; then sed -n '1,200p' src/backend/requirements.txt; else echo 'missing'; fi
          echo "--- pip packages (fastapi if installed) ---"
          python -m pip show fastapi || true
          python -m pip list --disable-pip-version-check | sed -n '1,200p' || true
          echo "--- environment ---"
          env | sort

      - name: Run tests
        run: |
          set -euo pipefail
          # Run tests using the exact Python interpreter used to install packages
          python -m pytest -q --maxfail=1
